variables:
  DEBFULLNAME: "Salsa Pipeline"
  DEBEMAIL: "<salsa-pipeline@debian.org>"
  DEBIAN_FRONTEND: noninteractive
  WORKING_DIR: $CI_PROJECT_DIR/debian/output
  DEB_BUILD_OPTIONS: "nocheck noautodbgsym"
  RELEASE: buster

stages:
  - build
  - test quality
  - upgrade in Buster
  - upgrade from Stretch/Jessie
  - test extras

build package:
  stage: build
  image: registry.salsa.debian.org/salsa-ci-team/images/gbp
  cache:
    paths:
      - ${CCACHE_WORK_DIR}
  variables:
    CCACHE_TMP_DIR: ${CI_PROJECT_DIR}/../.ccache
    CCACHE_WORK_DIR: ${WORKING_DIR}/.ccache
  services:
    - docker:dind
  artifacts:
    expire_in: 90 day
    name: "$CI_JOB_NAME:$CI_COMMIT_REF_SLUG"
    paths:
      - ${WORKING_DIR}/
  script:
    - mkdir -p ${CCACHE_WORK_DIR}
    - mv ${CCACHE_WORK_DIR} ${CCACHE_TMP_DIR}
    - gbp pull --ignore-branch --pristine-tar --track-missing
    - while true; do sleep 600; echo "10 minutes passed" >&2; done & # Progress keeper since build is long and silent
    - gbp buildpackage --git-ignore-branch --git-export-dir=${WORKING_DIR} --git-builder="docker-build.sh registry.salsa.debian.org/salsa-ci-team/images/dockerbuilder:${RELEASE}" | tail -n 10000 # Keep log under 4 MB
    - du -shc ${WORKING_DIR}/* # Show total file size of artifacts. Must stay are under 100 MB.
    - mv ${CCACHE_TMP_DIR} ${CCACHE_WORK_DIR}

build backported package:
  stage: build
  image: registry.salsa.debian.org/salsa-ci-team/images/gbp
  cache:
    paths:
      - ${CCACHE_WORK_DIR}
  variables:
    CCACHE_TMP_DIR: ${CI_PROJECT_DIR}/../.ccache
    CCACHE_WORK_DIR: ${WORKING_DIR}/.ccache
  services:
    - docker:dind
  artifacts:
    expire_in: 90 day
    name: "$CI_JOB_NAME:$CI_COMMIT_REF_SLUG"
    paths:
      - ${WORKING_DIR}/
  script:
    - mkdir -p ${CCACHE_WORK_DIR}
    - mv ${CCACHE_WORK_DIR} ${CCACHE_TMP_DIR}
    - gbp pull --ignore-branch --pristine-tar --track-missing
    - while true; do sleep 600; echo "10 minutes passed" >&2; done & # Progress keeper since build is long and silent
    - gbp buildpackage --git-ignore-branch --git-export-dir=${WORKING_DIR} --git-builder="docker-build.sh registry.salsa.debian.org/salsa-ci-team/images/dockerbuilder:stretch-backports" | tail -n 10000 # Keep log under 4 MB
    - du -shc ${WORKING_DIR}/* # Show total file size of artifacts. Must stay are under 100 MB.
    - mv ${CCACHE_TMP_DIR} ${CCACHE_WORK_DIR}

run lintian:
  stage: test quality
  dependencies:
    - build package
  image: registry.salsa.debian.org/salsa-ci-team/images/lintian:${RELEASE}
  script:
    - lintian ${WORKING_DIR}/*.changes | tee lintian.output
    - lintian2junit.py --lintian-file lintian.output > ${WORKING_DIR}/lintian.xml
  variables:
      GIT_STRATEGY: none
  artifacts:
    reports:
      junit: ${WORKING_DIR}/lintian.xml

# Reprotest exceeds the 2 hour timeout limit on Github CI, which should be fixed
# before actual reproducibility issues can be tested and fixed.
#run reprotest:
#  stage: test extras
#  dependencies:
#    - build package
#  image: registry.salsa.debian.org/salsa-ci-team/images/reprotest
#  artifacts:
#    name: "$CI_JOB_NAME:$CI_COMMIT_REF_SLUG"
#    paths:
#      - $CI_PROJECT_DIR/reprotest.log
#    when: always
#  script:
#    - apt-get update
#    - eatmydata apt-get build-dep -y .
#    - export DEB_BUILD_OPTIONS=nocheck
#    - eatmydata reprotest --min-cpus $(nproc --all) ${REPROTEST_EXTRA_ARGS} . -- null &> "${CI_PROJECT_DIR}/reprotest.log"
#  after_script:
#    - tail -n 5000 "${CI_PROJECT_DIR}/reprotest.log" >&2;
#  allow_failure: true

# Piuparts is passing on official piuparts.debian.org, but fail on Gitlab CI
# with 'FAIL: Package purging left files on system'.
run piuparts:
  stage: test extras
  dependencies:
    - build package
  image: registry.salsa.debian.org/salsa-ci-team/images/piuparts
  services:
    - docker:dind
  script:
    - CHROOT_PATH=/tmp/piuparts-test
    - CONTAINER_ID=$(docker run --rm -d debian:${RELEASE} sleep infinity)
    - docker exec ${CONTAINER_ID} bash -c "apt-get update && apt-get install eatmydata -y"
    - mkdir -p ${CHROOT_PATH}
    - docker export ${CONTAINER_ID} | tar -C ${CHROOT_PATH} -xf -
    - mknod -m 666 ${CHROOT_PATH}/dev/urandom c 1 9
    - mkdir -p ${CHROOT_PATH}/etc-target/apt/sources.list.d ${CHROOT_PATH}/etc-target/apt/preferences.d
    - cp -aTv /etc/apt/sources.list.d  ${CHROOT_PATH}/etc-target/apt/sources.list.d
    - cp -aTv /etc/apt/preferences.d  ${CHROOT_PATH}/etc-target/apt/preferences.d
    - mkdir /tmp/testdebs
    - cp -a ${WORKING_DIR}/*.deb /tmp/testdebs
    - apt-get update && apt-get install -y dpkg-dev
    - (cd /tmp/testdebs && dpkg-scanpackages . > Packages)
    - |
      for PACKAGE in $(ls ${WORKING_DIR}/*.deb)
      do
        piuparts --scriptsdir /etc/piuparts/scripts --allow-database --warn-on-leftovers-after-purge \
        --hard-link -e ${CHROOT_PATH} --bindmount /tmp/testdebs --testdebs-repo /tmp/testdebs ${PACKAGE}
      done
  variables:
      GIT_STRATEGY: none
  allow_failure: true

fresh install:
  stage: test quality
  dependencies:
    - build package
  image: debian:${RELEASE}
  artifacts:
    when: always
    name: "$CI_BUILD_NAME"
    paths:
      - ${WORKING_DIR}/debug
  script:
    - sed -i "s/101/0/g" -i /usr/sbin/policy-rc.d # Enable automatic restarts from maint scripts
    - cd ${WORKING_DIR} # Don't repeat this step, it's just cd ./debian/output
    - apt-get update
    # Install MariaDB built in this commit
    - apt-get install -y ./*.deb
    # Verify installation of MariaDB built in this commit
    - dpkg -l | grep -iE 'maria|mysql|galera' || true # List installed
    - mariadb --version # Client version
    - service mysql status
    - mkdir -p debug # Ensure dir exists before using it
    - find /var/lib/mysql -ls > debug/var-lib-mysql.list
    - cp -ra /etc/mysql debug/etc-mysql
    - cp -ra /var/log/mysql debug/var-log-mysql
    - mariadb --skip-column-names -e "select @@version, @@version_comment" # Show version
    - echo 'SHOW DATABASES;' | mariadb # List databases
    - mariadb -e "create database test; use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t; drop database test;" # Test InnoDB works
  variables:
      GIT_STRATEGY: none

mariadb-10.3.x to mariadb-10.3.y upgrade:
  stage: upgrade in Buster
  dependencies:
    - build package
  image: debian:${RELEASE}
  artifacts:
    when: always
    name: "$CI_BUILD_NAME"
    paths:
      - ${WORKING_DIR}/debug
  script:
    - sed -i "s/101/0/g" -i /usr/sbin/policy-rc.d # Enable automatic restarts from maint scripts
    - cd ${WORKING_DIR} # Don't repeat this step, it's just cd ./debian/output
    - apt-get update
    # Install almost everything currently in Debian Buster
    - apt-get install -y 'default-mysql*' 'mariadb-*' libmariadb3 'libmariadb-*' 'libmariadbd*' 'libmariadbclient-*'
    # Verify installation of MariaDB currently in Debian Buster
    - dpkg -l | grep -iE 'maria|mysql|galera' || true # List installed
    - service mysql status
    - mariadb --skip-column-names -e "select @@version, @@version_comment"
    - echo 'SHOW DATABASES;' | mysql
    # Install MariaDB built in this commit
    - apt-get install -y ./*.deb || true # Allow to proceed so debug artifacts get collected
    # Verify installation of MariaDB built in this commit
    - dpkg -l | grep -iE 'maria|mysql|galera' || true # List installed
    - mariadb --version # Client version
    - service mysql status
    - mkdir -p debug # Ensure dir exists before using it
    - find /var/lib/mysql -ls > debug/var-lib-mysql.list
    - cp -ra /etc/mysql debug/etc-mysql
    - cp -ra /var/log/mysql debug/var-log-mysql
    - mariadb --skip-column-names -e "select @@version, @@version_comment" # Show version
    - echo 'SHOW DATABASES;' | mariadb # List databases before upgrade are still there
    - mariadb -e "create database test; use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t; drop database test;" # Test InnoDB works
  variables:
      GIT_STRATEGY: none

mariadb-10.1 to mariadb-10.3 upgrade:
  stage: upgrade from Stretch/Jessie
  dependencies:
    - build package
  image: debian:stretch
  artifacts:
    when: always
    name: "$CI_BUILD_NAME"
    paths:
      - ${WORKING_DIR}/debug
  script:
    - sed -i "s/101/0/g" -i /usr/sbin/policy-rc.d # Enable automatic restarts from maint scripts
    - cd ${WORKING_DIR} # Don't repeat this step, it's just cd ./debian/output
    - apt-get update
    # Install almost everything currently in Debian Stretch
    - apt-get install -y 'default-mysql*' 'mariadb-*' 'libmariadbd*' 'libmariadbclient*'
    # Verify installation of MariaDB from Stretch
    - dpkg -l | grep -iE 'maria|mysql|galera' || true # List installed
    - service mysql status
    - mysql --skip-column-names -e "select @@version, @@version_comment"
    - echo 'SHOW DATABASES;' | mysql
    # Install MariaDB built in this commit
    - sed 's/stretch/buster/g' -i /etc/apt/sources.list # Enable next Debian release
    - apt-get install -y ./*.deb || true # Allow to proceed so debug artifacts get collected
    # Verify installation of MariaDB built in this commit
    - dpkg -l | grep -iE 'maria|mysql|galera' || true # List installed
    - mariadb --version # Client version
    - service mysql status
    - mkdir -p debug # Ensure dir exists before using it
    - find /var/lib/mysql -ls > debug/var-lib-mysql.list
    - cp -ra /etc/mysql debug/etc-mysql
    - cp -ra /var/log/mysql debug/var-log-mysql
    - mariadb --skip-column-names -e "select @@version, @@version_comment" # Show version
    - echo 'SHOW DATABASES;' | mariadb # List databases before upgrade are still there
    - mariadb -e "create database test; use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t; drop database test;" # Test InnoDB works
  variables:
      GIT_STRATEGY: none

test basic features:
  stage: test quality
  dependencies:
    - build package
  image: debian:${RELEASE}
  artifacts:
    when: always
    name: "$CI_BUILD_NAME"
    paths:
      - ${WORKING_DIR}/debug
  script:
    - sed -i "s/101/0/g" -i /usr/sbin/policy-rc.d # Enable automatic restarts from maint scripts
    - cd ${WORKING_DIR} # Don't repeat this step, it's just cd ./debian/output
    - apt-get update
    # Install MariaDB built in this commit
    - apt-get install -y ./*.deb
    # Verify installation of MariaDB built in this commit
    - dpkg -l | grep -iE 'maria|mysql|galera' || true # List installed
    - mariadb --version # Client version
    - service mysql status
    - mkdir -p debug # Ensure dir exists before using it
    - find /var/lib/mysql -ls > debug/var-lib-mysql.list
    - cp -ra /etc/mysql debug/etc-mysql
    - cp -ra /var/log/mysql debug/var-log-mysql
    - echo 'SHOW DATABASES;' | mariadb # List databases
    # Print info about server
    - mariadb --skip-column-names -e "select @@version, @@version_comment"
    - mariadb --skip-column-names -e "select engine, support, transactions, savepoints from information_schema.engines order by engine" | sort
    - mariadb --skip-column-names -e "select plugin_name, plugin_status, plugin_type, plugin_library, plugin_license from information_schema.all_plugins order by plugin_name, plugin_library"
    # Test various features
    - mariadb -e "CREATE DATABASE db"
    - mariadb -e "CREATE TABLE db.t_innodb(a1 SERIAL, c1 CHAR(8)) ENGINE=InnoDB; INSERT INTO db.t_innodb VALUES (1,'"'"'foo'"'"'),(2,'"'"'bar'"'"')"
    - mariadb -e "CREATE TABLE db.t_myisam(a2 SERIAL, c2 CHAR(8)) ENGINE=MyISAM; INSERT INTO db.t_myisam VALUES (1,'"'"'foo'"'"'),(2,'"'"'bar'"'"')"
    - mariadb -e "CREATE TABLE db.t_aria(a3 SERIAL, c3 CHAR(8)) ENGINE=Aria; INSERT INTO db.t_aria VALUES (1,'"'"'foo'"'"'),(2,'"'"'bar'"'"')"
    - mariadb -e "CREATE TABLE db.t_memory(a4 SERIAL, c4 CHAR(8)) ENGINE=MEMORY; INSERT INTO db.t_memory VALUES (1,'"'"'foo'"'"'),(2,'"'"'bar'"'"')"
    - mariadb -e "CREATE ALGORITHM=MERGE VIEW db.v_merge AS SELECT * FROM db.t_innodb, db.t_myisam, db.t_aria"
    - mariadb -e "CREATE ALGORITHM=TEMPTABLE VIEW db.v_temptable AS SELECT * FROM db.t_innodb, db.t_myisam, db.t_aria"
    - mariadb -e "CREATE PROCEDURE db.p() SELECT * FROM db.v_merge"
    - mariadb -e "CREATE FUNCTION db.f() RETURNS INT DETERMINISTIC RETURN 1"
    # Test that the features still work (this step can be done e.g. after an upgrade)
    - mariadb -e "SHOW TABLES IN db"
    - mariadb -e "SELECT * FROM db.t_innodb; INSERT INTO db.t_innodb VALUES (3,'"'"'foo'"'"'),(4,'"'"'bar'"'"')"
    - mariadb -e "SELECT * FROM db.t_myisam; INSERT INTO db.t_myisam VALUES (3,'"'"'foo'"'"'),(4,'"'"'bar'"'"')"
    - mariadb -e "SELECT * FROM db.t_aria; INSERT INTO db.t_aria VALUES (3,'"'"'foo'"'"'),(4,'"'"'bar'"'"')"
    - mariadb -e "SELECT * FROM db.t_memory; INSERT INTO db.t_memory VALUES (3,'"'"'foo'"'"'),(4,'"'"'bar'"'"')"
    - mariadb -e "SELECT COUNT(*) FROM db.v_merge"
    - mariadb -e "SELECT COUNT(*) FROM db.v_temptable"
    - mariadb -e "CALL db.p()"
    - mariadb -e "SELECT db.f()"
  variables:
      GIT_STRATEGY: none

run autopkgtest:
  stage: test quality
  dependencies:
    - build package
  image: registry.salsa.debian.org/salsa-ci-team/images/autopkgtest
  script:
    - wget https://salsa.debian.org/salsa-ci-team/autopkgtest-lxc/-/jobs/artifacts/master/raw/artifacts/lxc.tar?job=${RELEASE} -O lxc.tar
    - mkdir ${SCI_LXC_PATH} && tar xf lxc.tar -C ${SCI_LXC_PATH}
    - sed -i "s@salsa-ci-team/autopkgtest-lxc@${CI_PROJECT_PATH}@" ${SCI_LXC_PATH}/autopkgtest-${RELEASE}-amd64/config
    - |
        cat >/etc/lxc/lxc.conf <<EOT
        lxc.lxcpath=${SCI_LXC_PATH}
        EOT
    - umount -R /sys/fs/cgroup && mount -a
    - /etc/init.d/lxc-net start
    - /etc/init.d/lxc start
    - debci localtest $CI_PROJECT_DIR/debian/output/*.changes --suite ${RELEASE}
  variables:
      GIT_STRATEGY: none
      SCI_LXC_PATH: ${CI_PROJECT_DIR}/lxc

run backported autopkgtest:
  stage: test quality
  dependencies:
    - build backported package
  image: registry.salsa.debian.org/salsa-ci-team/images/autopkgtest
  script:
    - wget https://salsa.debian.org/salsa-ci-team/autopkgtest-lxc/-/jobs/artifacts/master/raw/artifacts/lxc.tar?job=${RELEASE} -O lxc.tar
    - mkdir ${SCI_LXC_PATH} && tar xf lxc.tar -C ${SCI_LXC_PATH}
    - sed -i "s@salsa-ci-team/autopkgtest-lxc@${CI_PROJECT_PATH}@" ${SCI_LXC_PATH}/autopkgtest-${RELEASE}-amd64/config
    - |
        cat >/etc/lxc/lxc.conf <<EOT
        lxc.lxcpath=${SCI_LXC_PATH}
        EOT
    - umount -R /sys/fs/cgroup && mount -a
    - /etc/init.d/lxc-net start
    - /etc/init.d/lxc start
    - debci localtest $CI_PROJECT_DIR/debian/output/*.changes --suite ${RELEASE}
  variables:
      GIT_STRATEGY: none
      SCI_LXC_PATH: ${CI_PROJECT_DIR}/lxc

run blhc:
  stage: test extras
  dependencies:
    - build package
  image: registry.salsa.debian.org/salsa-ci-team/images/blhc
  script:
    - blhc --debian --line-numbers --color ${WORKING_DIR}/*.build || [ $? -eq 1 ]
  variables:
    GIT_STRATEGY: none
  allow_failure: true

# Build a piece of software that was designed for libmysqlclient-dev but using the
# libmariadb-dev-compat layer. Should always end up using libmariadb.so.3 run-time.
build mariadbclient consumer Python-MySQLdb:
  stage: test quality
  dependencies:
    - build package
  image: debian:${RELEASE}
  script:
    - cd ${WORKING_DIR} # Don't repeat this step, it's just cd ./debian/output
    - mkdir -p debug # Ensure dir exists before using it
    - apt-get update
    - apt-get install -y pkg-config ./libmariadb-dev*.deb ./libmariadb3_*.deb ./mariadb-common*.deb
    - pkg-config --cflags --libs mysqlclient # See what MySQLdb builds with
    - apt-get install -y python3-pip
    - pip3 install mysqlclient # Compiles module against libmysqlclient
    - apt-get purge -y libmariadb-dev # Not needed for run-time
    - python3 -c "import MySQLdb; print(MySQLdb.get_client_info())"
  variables:
      GIT_STRATEGY: none

libmysql* to libmariadb* upgrade:
  stage: test extras
  dependencies:
    - build package
  image: debian:unstable
  artifacts:
    when: always
    name: "$CI_BUILD_NAME"
    paths:
      - ${WORKING_DIR}/debug
  script:
    - cd ${WORKING_DIR} # Don't repeat this step, it's just cd ./debian/output
    - dpkg -l | grep -iE 'maria|mysql|galera' || true
    - apt-get update
    # Install all libmysql* available in Debian unstable
    - apt-get install -y pkg-config libmysqld-dev libmysqlclient-dev
    - pkg-config --list-all
    - pkg-config --cflags mysqlclient # mysqlclient.pc from original package
    - apt-get install -y ./libmariadb3_*.deb ./mariadb-common_*.deb
    - pkg-config --list-all
    - apt-get install -y ./libmariadb-dev_*.deb
    - pkg-config --list-all
    - apt-get install -y ./libmariadb-dev-compat_*.deb
    - pkg-config --cflags mysqlclient # mysqlclient.pc from compat package
    - pkg-config --list-all
    - apt-get install -y ./libmariadbd19_*.deb
    - pkg-config --list-all
    - apt-get install -y ./libmariadbd-dev_*.deb
    - pkg-config --list-all
    - apt-get install -y default-libmysqlclient-dev default-libmysqld-dev
    - ldconfig -p # | grep -e mariadb -e mysql
    - pkg-config --list-all
    - pkg-config --cflags --libs mysqlclient
    - pkg-config --cflags --libs libmariadb
    - pkg-config --cflags --libs mariadb

default-libmysqlclient-dev upgrade:
  stage: upgrade in Buster
  dependencies:
    - build package
  image: debian:${RELEASE}
  artifacts:
    when: always
    name: "$CI_BUILD_NAME"
    paths:
      - ${WORKING_DIR}/debug
  script:
    - cd ${WORKING_DIR} # Don't repeat this step, it's just cd ./debian/output
    - dpkg -l | grep -iE 'maria|mysql|galera' || true
    - apt-get update
    - apt-get install -y pkg-config default-libmysqlclient-dev default-libmysqld-dev
    - pkg-config --list-all
    - apt-get install -y ./libmariadb3_*.deb ./libmariadb-dev_*.deb ./libmariadb-dev-compat_*.deb ./libmariadbd19_*.deb ./libmariadbd-dev_*.deb ./mariadb-common_*.deb
    - ldconfig -p # | grep -e mariadb -e mysql
    - pkg-config --list-all
    - pkg-config --cflags --libs mysqlclient
    - pkg-config --cflags --libs libmariadb
    - pkg-config --cflags --libs mariadb

default-libmysqlclient-dev on stretch upgrade:
  stage: upgrade from Stretch/Jessie
  dependencies:
    - build package
  image: debian:stretch
  artifacts:
    when: always
    name: "$CI_BUILD_NAME"
    paths:
      - ${WORKING_DIR}/debug
  script:
    - cd ${WORKING_DIR} # Don't repeat this step, it's just cd ./debian/output
    - dpkg -l | grep -iE 'maria|mysql|galera' || true
    - apt-get update
    - apt-get install -y pkg-config default-libmysqlclient-dev
    - pkg-config --list-all
    - echo 'deb http://deb.debian.org/debian sid main' > /etc/apt/sources.list
    - apt-get update; apt-get install -y apt # Uprade minimal stack first
    - apt-get install -y ./libmariadb3_*.deb ./libmariadbclient-dev_*.deb ./libmariadb-dev_*.deb ./libmariadb-dev-compat_*.deb ./libmariadbd19_*.deb ./libmariadbd-dev_*.deb ./mariadb-common_*.deb
    - ldconfig -p # | grep -e mariadb -e mysql
    - pkg-config --list-all
    - pkg-config --cflags --libs mysqlclient
    - pkg-config --cflags --libs libmariadb
    - pkg-config --cflags --libs mariadb

mariadb-connector-c on stretch upgrade:
  stage: upgrade from Stretch/Jessie
  dependencies:
    - build package
  image: debian:stretch
  artifacts:
    when: always
    name: "$CI_BUILD_NAME"
    paths:
      - ${WORKING_DIR}/debug
  script:
    - cd ${WORKING_DIR} # Don't repeat this step, it's just cd ./debian/output
    - dpkg -l | grep -iE 'maria|mysql|galera' || true
    - apt-get update
    - apt-get install -y pkg-config libmariadb2 libmariadb-dev libmariadb-dev-compat
    - pkg-config --list-all
    - echo 'deb http://deb.debian.org/debian sid main' > /etc/apt/sources.list
    - apt-get update; apt-get install -y apt # Uprade minimal stack first
    - apt-get install -y ./libmariadb3_*.deb ./libmariadbclient-dev_*.deb ./libmariadb-dev_*.deb ./libmariadb-dev-compat_*.deb ./libmariadbd19_*.deb ./libmariadbd-dev_*.deb ./mariadb-common_*.deb
    - ldconfig -p # | grep -e mariadb -e mysql
    - pkg-config --list-all
    - pkg-config --cflags --libs mysqlclient
    - pkg-config --cflags --libs libmariadb
    - pkg-config --cflags --libs mariadb

mysql-5.5 to mariadb-10.3 upgrade:
  stage: upgrade from Stretch/Jessie
  dependencies:
    - build package
  image: debian:jessie
  artifacts:
    when: always
    name: "$CI_BUILD_NAME"
    paths:
      - ${WORKING_DIR}/debug
  script:
    - sed -i "s/101/0/g" -i /usr/sbin/policy-rc.d # Enable automatic restarts from maint scripts
    - cd ${WORKING_DIR} # Don't repeat this step, it's just cd ./debian/output
    - apt-get update
    - apt-get install -y mysql-server
    # Verify installation of MySQL from Jessie
    - dpkg -l | grep -iE 'maria|mysql|galera' || true # List installed
    - service mysql status
    - mysql --skip-column-names -e "select @@version, @@version_comment"
    - echo 'SHOW DATABASES;' | mysql
    # Install MariaDB built in this commit
    - sed 's/jessie/buster/g' -i /etc/apt/sources.list # Enable next Debian release
    - apt-get update; apt-get install -y apt # Install apt 1.4.9 so the wildcard command below works
    - apt-get install -y ./*.deb || true # Allow to proceed so debug artifacts get collected
    # Verify installation of MariaDB built in this commit
    - dpkg -l | grep -iE 'maria|mysql|galera' || true # List installed
    - mariadb --version # Client version
    - service mysql status
    - mkdir -p debug # Ensure dir exists before using it
    - find /var/lib/mysql -ls > debug/var-lib-mysql.list
    - cp -ra /etc/mysql debug/etc-mysql
    - cp -ra /var/log/mysql debug/var-log-mysql
    - mariadb --skip-column-names -e "select @@version, @@version_comment" # Show version
    - echo 'SHOW DATABASES;' | mariadb # List databases before upgrade are still there
    - mariadb -e "create database test; use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t; drop database test;" # Test InnoDB works
  variables:
      GIT_STRATEGY: none
  allow_failure: true
# Temporairly allow failure in the test above since there seems to be a bug in udev
# upgrades that are not related to MariaDB:
#   Starting hotplug events dispatcher: systemd-udevdstart-stop-daemon: unrecognized option '--notify-await'

# Upgrading from MySQL 5.7 involves automatic renaming of auth_socket plugin
# to unix_socket and automaticly re-adding Password column in user table.
mysql-5.7 to mariadb-10.3 upgrade:
  stage: test extras
  dependencies:
    - build package
  image: debian:sid
  artifacts:
    when: always
    name: "$CI_BUILD_NAME"
    paths:
      - ${WORKING_DIR}/debug
  script:
    - sed -i "s/101/0/g" -i /usr/sbin/policy-rc.d # Enable automatic restarts from maint scripts
    - cd ${WORKING_DIR} # Don't repeat this step, it's just cd ./debian/output
    - apt-get update
    - apt-get install -y mysql-server
    # Verify installation of MySQL from Sid
    - dpkg -l | grep -iE 'maria|mysql|galera' || true # List installed
    - service mysql status
    - mysql --skip-column-names -e "SELECT @@version, @@version_comment"
    - mysql -e "SELECT Host,User,plugin,authentication_string FROM user;" mysql
    - mysql -e "SELECT * FROM plugin;" mysql
    - echo 'SHOW DATABASES;' | mysql
    # Install MariaDB built in this commit
    - apt-get install -y ./*.deb || true # Allow to proceed so debug artifacts get collected
    # Verify installation of MariaDB built in this commit
    - dpkg -l | grep -iE 'maria|mysql|galera' || true # List installed
    - mariadb --version # Client version
    - service mysql status
    - mkdir -p debug # Ensure dir exists before using it
    - find /var/lib/mysql -ls > debug/var-lib-mysql.list
    - cp -ra /etc/mysql debug/etc-mysql
    - cp -ra /var/log/mysql debug/var-log-mysql
    - sleep 5 # Give the mysql_upgrade a bit of time to complete before querying the server
    - mysql --skip-column-names -e "SELECT @@version, @@version_comment"
    - mysql -e "SELECT Host,User,plugin,authentication_string FROM user;" mysql
    - mysql -e "SELECT * FROM plugin;" mysql
    - echo 'SHOW DATABASES;' | mariadb # List databases before upgrade are still there
    - mariadb -e "create database test; use test; create table t(a int primary key) engine=innodb; insert into t values (1); select * from t; drop table t; drop database test;" # Test InnoDB works
  variables:
      GIT_STRATEGY: none
